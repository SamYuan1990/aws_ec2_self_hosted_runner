# shellcheck disable=SC1000-SC9999

name: Test and Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
    TEST_TAG: localhost:5001/sustainable_computing_io/aws_ec2_self_hosted_runner:latest

jobs:
  setup-runner:
    name: Docker Tests
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.create-runner.outputs.instance_id }}
      runner_name: ${{ steps.create-runner.outputs.runner_name }}

    # Run a local registry to push to
    services:
      registry:
        image: registry:2
        ports:
          - 5001:5000

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Docker BuildX
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build the Container
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.TEST_TAG }}

      - name: Create Runner
        id: create-runner
        run: |
          docker run \
            --env INPUT_ACTION="create" \
            --env INPUT_AWS_REGION="${{ secrets.AWS_REGION }}" \
            --env INPUT_GITHUB_TOKEN="${{ secrets.GH_SELF_HOSTED_RUNNER_TOKEN }}" \
            --env INPUT_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --env INPUT_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --env INPUT_SECURITY_GROUP_ID="${{ secrets.AWS_SECURITY_GROUP_ID }}" \
            --env INPUT_GITHUB_REPO="${{ github.repository }}" \
            --env INPUT_AMI_ID="ami-0e4d0bb9670ea8db0" \
            --env INPUT_INSTANCE_TYPE="t2.micro" \
            --env INPUT_CREATE_S3_BUCKET="false" \
            --env INPUT_SPOT_INSTANCE_ONLY="true" \
            --env GITHUB_OUTPUT="$GITHUB_OUTPUT" \
            -v "$GITHUB_OUTPUT":"$GITHUB_OUTPUT" \
            --rm ${{ env.TEST_TAG }} >> "$GITHUB_OUTPUT"

      - name: Print Output
        id: output
        run: |
          echo "instance_id ${{ steps.create-runner.outputs.instance_id }}"
          echo "instance_ip ${{ steps.create-runner.outputs.instance_ip }}"
          echo "runner_name ${{ steps.create-runner.outputs.runner_name }}"
    
  test-runner:
    needs: setup-runner
    name: GitHub Self Hosted Runner Tests
    runs-on: [self-hosted, linux, x64]

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
          export INSTANCE_ID="${{ needs.setup-runner.outputs.instance_id }}"
          echo "Running tests on self-hosted runner with instance ${INSTANCE_ID}"
          uname -a # or any other command
  
  destroy-runner:
    if: always()
    needs: [setup-runner, test-runner]
    runs-on: ubuntu-latest
    # Run a local registry to push to
    services:
      registry:
        image: registry:2
        ports:
          - 5001:5000

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Docker BuildX
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build the Container
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.TEST_TAG }}

      - name: Test unregister action
        run: |
          docker run \
            --env INPUT_ACTION="unregister" \
            --env INPUT_RUNNER_NAME="${{ needs.setup-runner.outputs.runner_name }}" \
            --env INPUT_GITHUB_TOKEN="${{ secrets.GH_SELF_HOSTED_RUNNER_TOKEN }}" \
            --env INPUT_GITHUB_REPO="${{ github.repository }}" \
            --rm ${{ env.TEST_TAG }}

      - name: Test terminate action
        id: terminate
        run: |
          docker run \
            --env INPUT_ACTION="terminate" \
            --env INPUT_AWS_REGION="${{ secrets.AWS_REGION }}" \
            --env INPUT_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --env INPUT_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --env INPUT_INSTANCE_ID="${{ needs.setup-runner.outputs.instance_id }}" \
            --rm ${{ env.TEST_TAG }}

      - name: Login to Quay
        uses: docker/login-action@v3
        with:
          registry: quay.io/sustainable_computing_io
          username: ${{ secrets.BOT_NAME }}
          password: ${{ secrets.BOT_TOKEN }}
      
      - name: Build and push the container
        uses: docker/build-push-action@v5
        with:
            context: .
            platforms: linux/amd64
            push: true
            tags: quay.io/sustainable_computing_io/aws_ec2_self_hosted_runner:latest
            labels: latest
            file: Dockerfile