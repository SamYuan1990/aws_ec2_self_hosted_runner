# shellcheck disable=SC1000-SC9999
name: Continuous Integration

on:
  workflow_call:
    secrets:
      AWS_REGION:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SECURITY_GROUP_ID:
        required: true
      AMI_ID:
        required: true
      GH_SELF_HOSTED_RUNNER_TOKEN:
        required: true

permissions:
  contents: read

jobs:
  setup-runner:
    name: GitHub Actions Test create instance
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.create-runner.outputs.instance_id }}
      runner_name: ${{ steps.create-runner.outputs.runner_name }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: create-runner
        uses: ./
        with:
            action: "create"
            aws_region: ${{ secrets.AWS_REGION }}
            github_token: ${{ secrets.GH_SELF_HOSTED_RUNNER_TOKEN }}
            aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            security_group_id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
            github_repo: ${{ github.repository }}
            ami_id: ${{ secrets.AMI_ID }}
            instance_type: "t2.micro"
            create_s3_bucket: "false"
            spot_instance_only: "true"

      - name: Print Output
        id: output
        run: |
          echo "instance_id ${{ steps.create-runner.outputs.instance_id }}"
          echo "instance_ip ${{ steps.create-runner.outputs.instance_ip }}"
          echo "runner_name ${{ steps.create-runner.outputs.runner_name }}"
          echo "bucket_name ${{ steps.create-runner.outputs.bucket_name }}"

  test-runner:
    needs: setup-runner
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Docker
        id: docker
        run: |
            # Add Docker's official GPG key:
            apt-get update -y
            apt-get install ca-certificates curl gnupg -y
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
            # Add the repository to Apt sources:
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update -y
            apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
            docker info

      - name: use Kepler action to deploy cluster
        uses: sustainable-computing-io/kepler-action@main
        with:
          ebpfprovider: libbpf
          cluster_provider: kind
          local_dev_cluster_version: v0.0.4
          prometheus_enable: true
          tekton_enable: true

      - name: Run Tests
        run: |
          export INSTANCE_ID="${{ needs.setup-runner.outputs.instance_id }}"
          echo "Running tests on self-hosted runner with instance ${INSTANCE_ID}"
          uname -a # or any other command
          cat /etc/os-release 
          cat /proc/cpuinfo
          kubectl get po --all-namespaces

  destroy-runner:
    if: always()
    name: GitHub Actions Test destroy instance
    needs: [setup-runner, test-runner]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        
      - name: unregister runner
        id: unregister
        uses: ./
        with:
          action: "unregister"
          runner_name: ${{ needs.setup-runner.outputs.runner_name }}
          github_token: ${{ secrets.GH_SELF_HOSTED_RUNNER_TOKEN }}
          github_repo: ${{ github.repository }}

      - name: terminate instance
        id: terminate
        uses: ./
        with:
          action: "terminate"
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance_id: ${{ needs.setup-runner.outputs.instance_id }}
            